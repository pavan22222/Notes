SQL is non-procedural language it process all the relational database products.
SQL Sub Languages in every database:
1) Data Definition Language (DDL):
 Create
 Alter
 Drop
 Truncate
 Rename(oracle 9i)
2) Data Manipulation Language (DML):
 Insert
 update
 delete
 merge(oracle 9i)
3) Data Retrieval Language(DRL) or Data Query Language(DQL):
 SELECT
4) Transactional Control Language (TCL):
 Commit
 Rollback
 Savepoint
5) Data Control Language(DCL):
 Grant
 Revoke

1.DDL(Data Definition Language):
------------------------------
	//create is used for creating the oracle objects like tables,views,sequences,...
	1.create ::
	--------
	syntax:create table employee(id number(2),name varchar2(10));

	//alter command is used for performing different opertaion on columns like add,modify.....
	2.alter:: 
	-------
		//add is used to add the columns
		1.add-->syntax: alter table employee add sal number(10,2);add(--,--,.....);
		//modify is used to modify the col datatype or size
		2.modify--->syntax:alter table employee modify id eid;
			    syntax:alter table employee modify id char(20);
		//drop to drop the col from existing table
		3.drop-->
			syntax:alter table employee drop column id;
		//rename is used for change the name of the column and also we can change the name of the table 
		4.rename-->
			syntax:alter table employee rename column eid to id;

	//drop command is used for dropping the column and table and alse sequences,etc.
	3. drop::
	---------
	     a.drop table employee;this query is  drops the table temporarly means after dropping also it is there in recycle bin
	     b.drop table employee purge; this query is used to drop table premanantly
		to get the dropped table from recycle bin-->flashback table employee to before drop;
		to drop the table from recycle bin--->purge table employee;
		to drop all the tables inside recycle bin--->purge  recyclebin;
	4.truncate
	----------
	->to delete all the rows from the table
	syntax:truncate table employee;

	5.rename
	--------
	->To rename the table or column 
	syntax :alter table employee rename column name to ename;
	syntax:rename employee to student;
========================================================================================================
2.Data Manipulation Language
---------------------------
	//this command is used to insert the data or values into table
	1.insert 
	---------
		syntax 1:insert into employee values(1,'Pavan');
		syntax 2:insert into employee(id) values (1); for inserting some of the values to columns
		syntax 3:insert into employee values (&id); for inserting group rows
			Enter id 1
			/
			Enter id 2
			/
	
	//this command is used for changing the data inside table
	2.update
	---------
		syntax:update employee set id=1 where name='pavan'
	//to delete the rows from the table
	3.delete
	---------
		syntax: delete from employee where id=2;
		-->deleted rows we can get back using rollback command
	
	4.merge
	-------







Difference between delete and truncate:
------------------------------------------
Whenever we are using „delete from tablename‟ or „truncate table tablename‟ then
automatically total data is deleted. Whenever we are using „delete from tablename‟ then
deleted data automatically stored in a buffer. We can get it back, this deleted data using
“rollback”. Whenever we are using „truncate table tablename‟ then total data permanently
deleted. Because truncate is an DDL command. That‟s why we cannot get it back this data
using “rollback”.

*ddl commands are auto committable
.................................................................................................
Creating a new table from another table:
-------------------------------------
Syntax: create table newtablename as select * from existingtablename;
Example: SQL> create table test as select * from emp;
SQL> select * from test;
Note: In all database systems whenever we are copying a table from another table
constraints are never copied. (Primary table, Foreign key,…..);

..................................................................................................

3.Data Query or Retrieval Language(DQL or DRL)
-------------------------------------------
	Operators Used in “Select” statement:
	------------------------------------
	1. Arthematic operator(+,-,*,/)
	2. Relational operator(=,<,<=,>,>=,[<> or!=]not equal).
	3. Logical operator (AND,OR,NOT)
	
	SQL> select name,sal,sal*2 as bonus from employee20;

	NAME                        SAL      BONUS
	-------------------- ---------- ----------
	naveen                    12222      24444
	pavan                     23333      46666
	srikanth                  32222      64444

	Q) write a query to display the employees except name not equal to pavan from emp table.
	Ans1: select * from employee20 where name != 'pavan';
				or 
	Ans2: select * from employee20 where name <> 'pavan';

	Q) Write a query to display the employees who are getting more than 2000 salary from emp
	table?
	Ans: SQL> select * from emp where sal>2000;

	Q) Write a query to retrieve the data based on two conditions ?
	Ans: select * from employee20 where name='pavan' and id=2;

	 ID		NAME              SAL
	---------- -------------------- ----------
         2                 pavan         23333

	 Q) Write a query to retrieve the data based on any one of the condition ?
	Ans: select * from employee20 where name='pavan' or id=1;
	 
	   ID		NAME               SAL
	---------- -------------------- ----------
         1	          naveen          12222
         2                pavan           23333

	Special operators:
	-------------------
	1) „In‟ opposite „not in‟
	2) „between‟ opposite „not between‟
	3) „is null‟ opposite „is not null‟
	4) „like‟ opposite „not like‟

	1. IN:
	------
		It is used to pick the values one by one from list of values. „In‟ operator performance
	is very high compared to „OR‟ operator. If we want to retrieve multiple values in a single
	column then we are using „IN‟ operators in place of „OR‟ operator because „IN‟ operator
	performance is high.
	Syntax: select * from tablename where columnname in(list of values);
	Columnname belongs to any data type is possible.
	Example: SQL> select * from emp where deptno
	-->it is alternative for "or" operator 
	Ex: select * from employee20 where id=1 or id=2 or id=3;

        ID           NAME              SAL
	---------- -------------------- ----------
         1 		naveen		12222
         2 		pavan		23333
         3 		srikanth	32222
				(or)
	  select * from employee20 where id IN(1,2,3,4,...);

	  ID           NAME              SAL
	---------- -------------------- ----------
         1 		naveen		12222
         2 		pavan		23333
         3 		srikanth	32222

	 Note :in sql the data inside table only case-sensitive.

	 NOT IN: If you want to retrieve some data except perticular values.
	 select * from employee20 where id not in(3);

		ID NAME                        SAL
	---------- -------------------- ----------
		 1 naveen                    12222
		 2 pavan                     23333
	Note:in relational databases it won't work with null values 
	
	Ex:select * from employee20 where id not in(3,null);
	Ans)no rows selected.

	2.BETWEEN :It is used to retrive the data in between the range
	---------
	Syntax:select * from employee20 where sal between 1000 and 200000;

		ID NAME                        SAL
	---------- -------------------- ----------
		 1 naveen                    12222
		 2 pavan                     23333
		 3 srikanth                  32222

	NOT BWTWEEN:It is used to retrieve the data except given range
	------------
	Syntax:select * from employee20 where sal not between 1000 and 200000;
		No rows selected;

	3) IS NULL, IS NOT NULL:
	-----------------------
		These two operators used in „where” condition only. These two
	operators are used to test weather a column having null values or not.
	Syntax: select * from tablename where columnname is null;
	Syntax: select * from tablename where columnname is not null;
	Q) write a query to display the employees who are not getting commission from emp table.
	Ans: SQL> select * from emp where comm is null;
	Q) write a query to display the employees who are getting commission from emp table?
	Ans: SQL> select * from emp where comm is not null;

	4.Like:
	-------
		 It is used to search strings based on character pattern. “Like” operator
	performance is very high compare to searching functions. In all databases along with like
	operator we are using 2 wild card charcters.
	% -> group of characters if want to match or string
	_ -> single character to match.
	Syntax: select * from tablename where columnname like „characterpattern‟;
	Q) write a query to display the employees whose ename start with “M” from emp table using
	like operator.
	Ans: SQL> select * from emp where ename like „M‟;
	MUARLI SIR 2015
	23
	MARTIN
	MILLER
	Q) write a query to display the employees where ename second letter will be „L‟ from emp
	table using „like‟ operator?
	Ans: SQL> select * from emp where ename like „_ _L%‟;
	ALLEN
	CLARK
	BLAKE
	Q) write a query to display the employees who are joining in the month December from the
	emp table using like operator.
	Ans: SQL> select * from emp where hiredate like „_ _ _D%‟; (or) „%DEC%”;
	Q) write a query to display the employees who are joining in the year “81” from emp table
	using like operator?
	Ans: SQL> select * from emp where emp table like „%81‟;
     ................................................................................................
	Concatenation Operator(|| double pipe): 
	-----------------------------------------
				It is not a special operator rarely used in “SQL” and regularly used in “PL/SQL”. 
	If we want to display column data along with literal strings then we must use concatenation operator.
	
	Eg: select „my employee names are‟|| ename from emp;
	If we want to display our own space in between the columns then also we can use
	concatenation operator.
	Eg: select ename||‟ „||sal from emp;
	Eg: select 'salry of '||name||' is::'||sal from employee20;
	o/p:
	-----
	salry of naveen is::12222
	salry of pavan is::23333
	salry of srikanth is::32222
-----------------------------------------------------------------------------------------------
	NVL(): NVL() is a predefined function which is used to replace or substitute user defined
	value in place of “null”.
	Syntax: NVL(exp1,exp2);
	Here exp1,exp2 must belongs to same datatype. If exp1 is null then it returns exp2.
	Otherwise it returns exp1.
	Eg: 1) NVL(null,30) -> 30.
	2) NVL(10,20) -> 10.
	Solution: select ename, sal, comm, sal+NVL(comm, 0) from emp where ename= „SMITH”;
	ENAME SAL COMM SAL+COMM
	--------- -------- ----------- ------------------
	SMITH 1100 Null 1100
	 Sal+ nvl(comm.,0)
	 1100 + nvl(1100,0)
	 1100 + 0
	 1100
	NVL2(): Oracle 9i introduced NVL2() function. This function accepts three parameters.
	Syntax: NVL2(exp1,exp2,exp3).
	Here if exp1 is null, then it returns exp3. Otherwise it returns exp2.
	Eg: SQL> select nvl2(null,10,20) from dual;
	20
	SQL> select nvl2(30,40,50) from dual;
	40
	Q) Update employee commission as follows using nvl2() from emp table;

	
	SQL> update employee20 set comm=nvl(comm,500);

	3 rows updated.

	SQL> select * from employee20;

		ID NAME                        SAL HIREDATE        COMM
	---------- -------------------- ---------- --------- ----------
		 1 naveen                    12222                  500
		 2 pavan                     23333                  500
		 3 srikanth                  32222                  500

	 update employee20 set comm=nvl2(comm,comm+200,500);

	3 rows updated.

	SQL> select * from employee20;

		ID NAME                        SAL HIREDATE        COMM
	---------- -------------------- ---------- --------- ----------
		 1 naveen                    12222                  700
		 2 pavan                     23333                  700
		 3 srikanth                  32222                  700


	Functions: Functions are used to solve particular task and also functions must return a
	value. Oracle have two types of functions.
	1. Predefined functions
	2. User defined functions
	1) Predefined functions: there are 4 types.
	 Number function
	 Character function
	 Date function
	 Group function(or) Aggregate function

	1.Number Function:
	-------------------
	1) Number function: These functions operate over “number” data.
	i. Abs() :
	---------
		It is used to convert negative values into positive values.
	Eg: SQL> select abs(-50) from dual;
	50
	-------------------------------------------------------------------------------------
	ii. Dual():
	-----------
		Dual is a predefined virtual table which contains only one row and one column
	Dual table is used to test predefined, user defined functions functionality.
	Example for testing predefined functions:
	SQL> select nvl(null,30) from dual;
	30
	SQL> select nvl(20,30) from dual;
	20
	SQL> select * from dual;
	Note: In oracle by default dual table column datatype is varchar2()

	Eg: select * from dual;
	Generally, this table is also used to perform mathematical operations.
	Eg: SQL> select 10+50 from dual;
	60
	Eg: SQL> select ename, comm, sal, abs(comm-sal) from emp where comm is not null;
	---------------------------------------------------------------------------------------
	iii. Mod(m,n): 
	--------------
	It will gives remainder after „m‟ divided by „n‟.
	Eg: SQL> select mod(10,5) from dual;
	o/p:0
	----------------------------------------------------------------------------------
	iv.Round(m,n): 
	----------
		It rounds given floated valued number „m‟ based on „n‟.
	Eg: SQL> select round(1.8) from dual;
	2
	SQL> select round(1.23456,3) from dual;
	1.235
	Note: Round always checks remaining number if remaining number is above 50% then
	one added to the rounded number.
	Eg: SQL> select round(1285.456,-1) from dual;
	1290
	Execution:
	Step1: 1280->5 is replace with 0. Out of 10, 5 is above 50%(>=)
	Step2: 1280
	+1
	---------------
	1290
	Eg: select ename, sal, round(sal,-1) from emp;
	Eg: select ename, sal, round(sal/22), round(sal/22,1), round(sal/22,2) from emp;
	
	SQL> select round(sal) from employee20;

	ROUND(SAL)
	----------
	     12222
	     23333
	     32222
	-------------------------------------
	 select round(sal,-1) from employee20;

	ROUND(SAL,-1)
	-------------
		12220
		23330
		32220

	------------------------------------------------------------------------------------
	v. Trunc(m,n):
	--------------
		It truncates given floated values number „m‟ based on „n‟. This function
	doesn‟t check remaining number is above 50% or below 50%.
	Eg: SQL>select trunk(1.8) from dual;
	Eg: SQL> select trunk(1.23456,3) from dual;
	1.234
	-------------------------------------------------------------------------------
	vi. Greatest(exp1,exp2,…. expn) and Least(exp1,exp2,…. expn):
	Greatest returns maximum value among given expressions. Where as Least returns
	minimum value among given expressions.
	Eg: SQL> select greatest(3,5,8,9) from dual ;
	9
	SQL> select ename, sal, comm, greatest(sal,comm)from emp where comm is not null;
	SQL> select max(sal) from emp;
	6600
	--------------------------------------------------------------------------------------
	vii. Ceil() and Floor(): 
	--------------------------
		These two functions always return integer. Ceil() returns nearest
	greatest integer where as floor() returns nearest lowest integer.
	Eg: select ceil(1.3) from dual;
	2
	Eg: select floor(1.9) from dual;
	1
------------------------------------------------------------------------------------------------
	4.GROUP FUNCTION (OR) AGGREGATE FUNCTION:
	-------------------------------------------
	Oracle having following group function
	1. max()
	2. min()
	3. avg()
	4. sum()
	5. count(*)
	6. count(column name)
	In all databases group functions are operate over number of values within a column and
	returns a single value
	1. Max(): 
	---------
		It returns maximum value within a column.
	Eg: SQL> select max(sal) from emp;
	6600

	QL> select name,sal from  employee20 where sal=(select max(sal) from employee20);

	NAME                        SAL
	-------------------- ----------
	srikanth                  32222
	
	SQL> select max(hiredate) from employee20;

	MAX(HIRED
	---------
	09-APR-19
	Note: In Hiredate case it returns the recent joined date.

	select max(name) from employee20;

	MAX(NAME)
	--------------------
	srikanth

	(A------z) it takes like a is 1,z is 24.

	2. Min():
	---------
		It returns the min value from the column of a table
	Eg: SQL> select min(sal) from emp;
	750
	To know the senior most employee
	SQL> select min(hiredate) from emp;
	17-DEC-80
	In all database systems we are not allowed to use group functions in “where” clause.
	SQL> select * from emp where sal= min(sal);
	Error: group function is not allowed in “where”

	CONSTRAINTS:
	=============
	Constraints are used to prevents or stops invalid data entry into our tables. Generally
	constraints are created on table columns. Oracle server having following types of
	constraints.
	1. Not null
	2. Unique
	3. Primary key
	4. Foreign key
	5. Check
	These are called “Constraints (or) Constraint types”.

	All the above constraints are created in two ways:
	1. Using column level
	2. Using table level
	1. Using Column level: In this methos we are defining constraints on individual
	columns. That is whenever we are defining the column then only immediately we are
	specifying constraint type.
	Syntax: create table tablename(col1 datatype(size) constraint type, col2 datatype(size)
	constraint type,…..);
	2. Using Table level: In this method we are defining constraints on group of columns
	i.e., in this method first we are defining all columns and last only we are specifying
	constraint type along with group of columns.
	Syntax: create table tablename(col1 datatype(size),col2 datatype(size),…. ,
	constrainttype (col1,col2,….));
	1. Not NULL: This constraint doesn‟t support table level. This constraint doesn‟t accepts
	null values. But it will accepts duplicate values.
	Column level: SQL> create table t1(sno number(10) not null, name varchar2(10));
	Testing: SQL> insert into t1 values(null,‟abc‟);
	ORA-1400: cannot insert null into SNO;
	Table level: SQL> create table t1(sno number(10), name varchar2(10), not
	null(sno,name));	

	2. UNIQUE: This constraint is defined on column level, table level. This constraint doesn‟t
	accepts duplicate values. But it will accepts null values.
	Note: Whenever we are creating unique constraints then oracle server internally
	automatically creates b-tree index on those columns.
	Column level: SQL> create table t2(sno number(10) unique, name varchar2(10));

	Table level: SQL> create table t2(sno number(10), name varchar2(10),
	unique(sno,name));
	Table created
	Eg: SQL> insert into t3(….)
	SNO NAME
	-----------------------
	1 murali
	1 abc
	SQL> select * from t3;
	Error: ORA-00001: Unique constraint violated.

	3. Primary Key:
	================
		Primary key “Uniquely identifying a record in a table”. There can be only
	one primary key in a table and also primary key doesn‟t accepts duplicate null values.
	Note: Whenever we are creating primary key then oracle server automatically create an
	“b- tree” indexes on those columns.
	Column level: SQL> create table t4(sno number(10) primary key, name varchar2(10));
	Table created
	Table level: SQL> create table t4(sno number(10), name varchar2(10), primary
	key(sno,name));
	This is also called as “Composite Primary Key” i.e., it is the combination of columns as a
	“single primary key”.
	4. Foreign Key: 
	----------------
		If we want to establishes relationship between tables then we are using
	“Referential Integrity Constraints” (Foreign Key). One table foreign key must belongs to
	another table “primary key”. Here these two columns must belong to same data types.
	Always foreign key values based on “primary key” values only. Generally, primary key
	doesn‟t accepts duplicate, null, values where as foreign key accepts duplicate, null values.


Adding (or) Dropping constraints on existing table:
----------------------------------------------------
In Oracle, we can add or drop constraints on existing table using “ALTER” command.
NOTE 1: If we want to add constraints on existing table or existing column then we are
using “table level syntax method”.
Eg: SQL> alter table a1
add primary key(sno);
NOTE 2: If we want to add a new column along with constraint then we are using
“Column level syntax method”.
Eg: SQL> alter table a1 add name varchar2(10) unique;
MUARLI SIR 2015
53
Q) Add foreign key in existing a2 references a1?
Ans: SQL> alter table a2 add foreign key(sno) references a1(sno);
NOTE 3: If we want to add “NOT NULL” constraints into existing table or existing column
then we are using “alter with modify”.
Syntax: alter table tablename modify columnname not null;
Eg: SQL> create table a3(sno number(10));
SQL> alter table a3 modify sno not null;
Q) Write a query to add new column with not null into a3?
Ans: SQL> alter table a3 add name varchar2(10) not null;
NOTE: In Oracle, whenever we are copying a table from another table constraints are
never copied. But in all database systems “not null” constraints only copied.
Eg: SQL> create table a4 as select * from a3;
“not null is copied”
SQL> desc a4;
Eg: SQL> create table dept1 as select * from dept;
SQL> select * from dept1;
SQL> alter table dept1 add primary key(deptno);
SQL> create table emp1 as select * from emp;
SQL> select * from emp1;
SQL> alter table emp1 add primary key(empno);
SQL> alter table emp1 add foreign key deptno references emp1(deptno) on delete
cascade;
Dropping Constraints: By dropping “Constraint name” two methods for dropping
constraints.
Method 1: Alter table tablename drop constraint constraint name;
OR
Method 2:
A. Alter table tablename drop primary key;
B. Alter table tablename drop unique(col1,col2,….);

create table test(sno number(10) primary key);
SQL> alter table test drop primary key;
NOTE: In Oracle, if we want to drop primary key along with referenced foreign keys then
we are using “Cascade” clause along with “Alter drop”.
Syntax: alter table tablename drop primary key cascade;
SQL> alter table a1 drop primary key;
Error: this unique/primary key is referenced by some foreign key.
Solution: SQL> alter table a1 drop primary key cascade;


dense_rank():
-----------

SQL> select name,salary,dense_rank() over(order by salary) rank from employee;

NAME                     SALARY       RANK
-------------------- ---------- ----------
Pavan J                   12220          1
Pavan                     20000          2
Naveen Angati             20000          2

SQL> select * from(select name,salary,dense_rank() over(partition by dno order by salary) rank from employee) where rank=1;

NAME                     SALARY       RANK
-------------------- ---------- ----------
Pavan J                   12220          1
Pavan                     20000          1

SQL> select * from(select name,salary,dno,dense_rank() over(partition by dno order by salary) rank from employee) where rank=1;

NAME                     SALARY        DNO       RANK
-------------------- ---------- ---------- ----------
Pavan J                   12220         10          1
Pavan                     20000         20          1

SQL> select * from(select name,salary,dno,dense_rank() over(partition by dno order by salary)as rank from employee) where rank=1;

NAME                     SALARY        DNO       RANK
-------------------- ---------- ---------- ----------
Pavan J                   12220         10          1
Pavan                     20000         20          1

SQL> select * from(select name,salary,dno,dense_rank() over(partition by dno order by salary)as rank from employee) where rank=2;

NAME                     SALARY        DNO       RANK
-------------------- ---------- ---------- ----------
Naveen Angati             20000         10          2